最小生成树
prime法
#include <bits/stdc++.h>
using namespace std;
#define inf 123456789
#define maxn 5005
#define maxm 200005

struct edge {
    int v, w, next;
} e[maxm << 1];
//注意是无向图，开两倍数组
int head[maxn], dis[maxn], cnt, n, m, tot, now = 1, ans;
//已经加入最小生成树的的点到没有加入的点的最短距离，比如说1和2号节点已经加入了最小生成树，那么dis[3]就等于min(1->3,2->3)
bool vis[maxn];

//链式前向星加边
//链式前向星以边为基础，采用头插法将数据录入
void add(int u, int v, int w) {
    e[++cnt].v = v;
    e[cnt].w = w;
    e[cnt].next = head[u];
    head[u] = cnt;
}

//读入数据
void init() {
    cin >> n >> m;
    int u, v, w;
    for (int i = 1; i <= m; ++i) {
        cin >> u >> v >> w;
        add(u, v, w), add(v, u, w);
    }
}

int prim() {
    //先把dis数组附为极大值
    for (int i = 2; i <= n; ++i) {
        dis[i] = inf;
    }
    //这里要注意重边，所以要用到min
    for (int i = head[1]; i; i = e[i].next) {
        dis[e[i].v] = min(dis[e[i].v], e[i].w);
    }
    while (++tot < n) { //最小生成树边数等于点数-1
        int minn = inf; //把minn置为极大值
        vis[now] = 1; //标记点已经走过
        //枚举每一个没有使用的点
        //找出最小值作为新边
        //注意这里不是枚举now点的所有连边，而是1~n
        for (int i = 1; i <= n; ++i) {
            if (!vis[i] && minn > dis[i]) {
                minn = dis[i];
                now = i;
            }
        }
        ans += minn;
        //枚举now的所有连边，更新dis数组
        for (int i = head[now]; i; i = e[i].next) {
            int v = e[i].v;
            if (dis[v] > e[i].w && !vis[v]) {
                dis[v] = e[i].w;
            }
        }
    }
    return ans;
}

int main() {
    init();
    printf("%d", prim());
    return 0;
}
kruskal法
//利用并查集
#include <bits/stdc++.h>
using namespace std;

struct Edge {
	int u, v, w;
} edge[200005];
int fa[5005], n, m, ans, eu, ev, cnt;

bool cmp(Edge a, Edge b) {
	return a.w < b.w;
}

//快排的依据（按边权排序）
int find(int x) {
	while (x != fa[x])
		x = fa[x] = fa[fa[x]];
	return x;
}

//并查集循环实现模板，及路径压缩，不懂并查集的同学可以戳一戳代码上方的“并查集详解”
void kruskal() {
	sort(edge, edge + m, cmp);
	//将边的权值排序
	for (int i = 0; i < m; i++) {
		eu = find(edge[i].u), ev = find(edge[i].v);
		if (eu == ev) {
			continue;
		}
		//若出现两个点已经联通了，则说明这一条边不需要了
		ans += edge[i].w;
		//将此边权计入答案
		fa[ev] = eu;
		//将eu、ev合并
		if (++cnt == n - 1) {
			break;
		}
		//循环结束条件，及边数为点数减一时
	}
}

int main() {
	cin >> n >> m;
	for (int i = 1; i <= n; i++) {
		fa[i] = i;
	}
	//初始化并查集
	for (int i = 0; i < m; i++) {
		cin >> edge[i].u >> edge[i].v >> edge[i].w;
	}
	kruskal();
	printf("%d", ans);
	return 0;
}
